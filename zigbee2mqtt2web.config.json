{
  "COMMENT": "Flask settings: whatever Flaks needs to work normally",
  "server_systemd_name": "Zigbee2Mqtt2Web",
  "server_listen_port": 1234,
  "COMMENT_ui_local_path": "Delete or leave empty to stop ZMW from serving a UI",
  "ui_local_path": "./zigbee2mqtt2web_ui/www",
  "COMMENT_www_extra": "If present, will set an additional directory to serve files from. The prefix must start with a slash and not be /www",
  "www_extra_local_path": "./zigbee2mqtt2web_ui/www",
  "www_extra_uri_prefix": "/web_assets",

  "COMMENT_www_https": "https mode. Requires pyopenssl and may not work in RPIs",
  "USAGE1_www_https": "Leave empty to use an adhoc TLS cert (works, but will give security warnings in browsers)",
  "USAGE2_www_https": "Point to a local path containing key and cert files to enable real ssl mode. Use `make ssl` to build them.",
  "DISABLED_www_https": ".",
  "COMMENT1_httponly_listen_port": "server_listen_port may use https if www_https is enabled, but https may not work for some use cases",
  "COMMENT2_httponly_listen_port": "such as serving assets in the LAN (eg Sonos won't accept self signed certs). Comment out to disable.",
  "DISABLED_httponly_listen_port": 1235,

  "COMMENT": "MQTT settings: how to connect to MQTT",
  "mqtt_skip_connect_for_dev": false,
  "mqtt_ip": "127.0.0.1",
  "mqtt_port": 1883,

  "COMMENT": "The topic prefix that zibee2mqtt will be using",
  "mqtt_topic_prefix": "zigbee2mqtt",

  "COMMENT": "Friendlier names for devices",
  "mqtt_device_aliases": {
    "example_mqtt_ieee_address": "alias",
    "example_mqtt_friendly_name": "friendlier_name"
  },

  "COMMENT": "The topic to use when forwarding messages to websocket",
  "mqtt_socketio_topic": "mqtt_thing_msg",

  "COMMENT": "Sensor history settings. Retention rows and days are both optional. When both are specified, it will take the most restrictive option (ie if days=2 and rows=0, no rows will be stored). When none are specified, no measurements are ever deleted.",
  "sensor_db_path": "./sensors.sqlite",
  "sensor_db_retention_rows": 100,
  "sensor_db_retention_days": 2,

  "COMMENT": "Spotify settings, leave out to disable Spotify integration",
  "spotify": {
       "debug_log": true,
       "start_reauth_url_path": "/spotify/start_reauth/",
       "set_reauth_code_url_path": "/spotify/set_reauth/",
       "redirect_uri": "SPOTIFY_APP_REDIRECT_URI",
       "client_secret": "SPOTIFY_APP_CLIENT_SECRET",
       "client_id": "SPOTIFY_APP_CLIENT_ID",
       "spotipy_cache": "./config.spotify_cache.json"
   },

  "COMMENT": "Sonos settings, leave out to skip loading the Sonos module",
  "sonos": {
       "debug_log": false,

       "COMMENT_zmw_thing_name": "Used as url prefix for sonos REST interface and general id for the web interface",
       "zmw_thing_name": "sonos",

       "COMMENT_cache_paths": "Where to store audio asset files after (TTS or adhoc user uploads). Delete to disable functionality.",
       "tts_cache_path": "./tts_cache",
       "user_audio_cache_path": "./user_audio_cache",
       "enable_user_audio_annoucements": true,
       "enable_tts_annoucements": true,

       "COMMENT1_url_base_tts_asset_webserver": "URL that can serve TTS assets; needs to be reachable by all Sonos speakers",
       "COMMENT2_url_base_tts_asset_webserver": "Hint: you probably want http://$LAN_VISIBLE_IP:$THIS_CONFIG_HTTP_ONLY_PORT",
       "url_base_asset_webserver": "http://192.168.1.152:1235",

       "COMMENT1_API": "An API key is needed to do graceful announcements in Sonos. Without an API key, announcements only work if",
       "COMMENT2_API": "no other media is playing at the moment. You should register your own API key at developer.sonos.com.",
       "COMMENT3_API": "You may use the example API keys below to test, but they belong to https://github.com/jjlawren/sonos-websocket/",
       "COMMENT4_API": "and you shouldn't use them for your own system",
       "COMMENT_EG_api_key": "123e4567-e89b-12d3-a456-426655440000",
       "COMMENT_EG_key_app_id": "com.jjlawren.sonos_websocket",
       "COMMENT_EG_api_key_name": "Sonos Websocket"
  },

  "COMMENT": "Security cam settings. Read FTPD.py for info",
  "security_cam": {
    "cam_ips": ["LIST_OF_YOUR_CAM_IPS"],
    "motion_timeout_secs": 300,
    "ftp": {
      "ip": "LISTEN_ADDR_FOR_FTPD",
      "port": 2121,
      "user": "user",
      "pwd": "123",
      "upload_local_path": "WHERE_TO_STORE_UPLOADED_FILES",
      "ftp_tainted_marker_path": "MARKER_TO_CRASHLOOP_READ_DOCS"
    }
  },

  "COMMENT": "WhatsApp integration. Read whatsapp.py for setup info.",
  "whatsapp": {
    "tok": "THIS_IS_A_PASSWORD_BE_CAREFUL",
    "notify_targets": ["TARGET_PHONE_NUMBER", "ANOTHER_TARGET_PHONE_NUMBER"],
    "from_number": "A_TEST_NUMBER_GO_READ_DOCS"
  },

  "COMMENT": "Doorbell, based on Reolink",
  "doorbell": {
    "host": "192.168.1.200",
    "user": "admin",
    "pass": "",
    "webhook_service": "http://192.168.1.20",
    "webhook_base_path": "/camwebhook"
  },

  "COMMENT": "JSON is silly"
}
